/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 647.0, "minX": 0.0, "maxY": 50418.0, "series": [{"data": [[0.0, 647.0], [0.1, 781.0], [0.2, 840.0], [0.3, 840.0], [0.4, 931.0], [0.5, 1049.0], [0.6, 1095.0], [0.7, 1177.0], [0.8, 1196.0], [0.9, 1213.0], [1.0, 1232.0], [1.1, 1257.0], [1.2, 1259.0], [1.3, 1266.0], [1.4, 1266.0], [1.5, 1301.0], [1.6, 1337.0], [1.7, 1351.0], [1.8, 1354.0], [1.9, 1375.0], [2.0, 1396.0], [2.1, 1412.0], [2.2, 1419.0], [2.3, 1424.0], [2.4, 1474.0], [2.5, 1484.0], [2.6, 1497.0], [2.7, 1499.0], [2.8, 1502.0], [2.9, 1547.0], [3.0, 1574.0], [3.1, 1591.0], [3.2, 1626.0], [3.3, 1627.0], [3.4, 1653.0], [3.5, 1662.0], [3.6, 1668.0], [3.7, 1685.0], [3.8, 1717.0], [3.9, 1741.0], [4.0, 1746.0], [4.1, 1786.0], [4.2, 1808.0], [4.3, 1809.0], [4.4, 1835.0], [4.5, 1839.0], [4.6, 1846.0], [4.7, 1856.0], [4.8, 1856.0], [4.9, 1868.0], [5.0, 1921.0], [5.1, 2002.0], [5.2, 2011.0], [5.3, 2030.0], [5.4, 2041.0], [5.5, 2045.0], [5.6, 2054.0], [5.7, 2086.0], [5.8, 2100.0], [5.9, 2106.0], [6.0, 2117.0], [6.1, 2134.0], [6.2, 2164.0], [6.3, 2225.0], [6.4, 2248.0], [6.5, 2249.0], [6.6, 2269.0], [6.7, 2271.0], [6.8, 2274.0], [6.9, 2290.0], [7.0, 2319.0], [7.1, 2336.0], [7.2, 2341.0], [7.3, 2368.0], [7.4, 2394.0], [7.5, 2402.0], [7.6, 2404.0], [7.7, 2408.0], [7.8, 2425.0], [7.9, 2425.0], [8.0, 2453.0], [8.1, 2473.0], [8.2, 2500.0], [8.3, 2520.0], [8.4, 2530.0], [8.5, 2549.0], [8.6, 2567.0], [8.7, 2574.0], [8.8, 2590.0], [8.9, 2595.0], [9.0, 2603.0], [9.1, 2604.0], [9.2, 2607.0], [9.3, 2612.0], [9.4, 2699.0], [9.5, 2703.0], [9.6, 2721.0], [9.7, 2726.0], [9.8, 2748.0], [9.9, 2763.0], [10.0, 2764.0], [10.1, 2767.0], [10.2, 2769.0], [10.3, 2770.0], [10.4, 2780.0], [10.5, 2805.0], [10.6, 2814.0], [10.7, 2822.0], [10.8, 2877.0], [10.9, 2878.0], [11.0, 2882.0], [11.1, 2885.0], [11.2, 2904.0], [11.3, 2926.0], [11.4, 2928.0], [11.5, 2980.0], [11.6, 2999.0], [11.7, 3003.0], [11.8, 3005.0], [11.9, 3016.0], [12.0, 3025.0], [12.1, 3028.0], [12.2, 3079.0], [12.3, 3083.0], [12.4, 3099.0], [12.5, 3109.0], [12.6, 3109.0], [12.7, 3143.0], [12.8, 3148.0], [12.9, 3168.0], [13.0, 3182.0], [13.1, 3189.0], [13.2, 3196.0], [13.3, 3197.0], [13.4, 3207.0], [13.5, 3224.0], [13.6, 3236.0], [13.7, 3239.0], [13.8, 3249.0], [13.9, 3263.0], [14.0, 3268.0], [14.1, 3276.0], [14.2, 3276.0], [14.3, 3279.0], [14.4, 3286.0], [14.5, 3293.0], [14.6, 3297.0], [14.7, 3300.0], [14.8, 3307.0], [14.9, 3308.0], [15.0, 3309.0], [15.1, 3313.0], [15.2, 3318.0], [15.3, 3322.0], [15.4, 3324.0], [15.5, 3331.0], [15.6, 3357.0], [15.7, 3359.0], [15.8, 3396.0], [15.9, 3397.0], [16.0, 3406.0], [16.1, 3406.0], [16.2, 3417.0], [16.3, 3420.0], [16.4, 3430.0], [16.5, 3433.0], [16.6, 3435.0], [16.7, 3445.0], [16.8, 3447.0], [16.9, 3449.0], [17.0, 3454.0], [17.1, 3457.0], [17.2, 3463.0], [17.3, 3473.0], [17.4, 3473.0], [17.5, 3484.0], [17.6, 3491.0], [17.7, 3497.0], [17.8, 3501.0], [17.9, 3518.0], [18.0, 3531.0], [18.1, 3537.0], [18.2, 3543.0], [18.3, 3560.0], [18.4, 3563.0], [18.5, 3568.0], [18.6, 3586.0], [18.7, 3600.0], [18.8, 3607.0], [18.9, 3614.0], [19.0, 3616.0], [19.1, 3617.0], [19.2, 3623.0], [19.3, 3628.0], [19.4, 3628.0], [19.5, 3637.0], [19.6, 3647.0], [19.7, 3677.0], [19.8, 3686.0], [19.9, 3714.0], [20.0, 3722.0], [20.1, 3733.0], [20.2, 3734.0], [20.3, 3739.0], [20.4, 3750.0], [20.5, 3754.0], [20.6, 3767.0], [20.7, 3779.0], [20.8, 3787.0], [20.9, 3793.0], [21.0, 3793.0], [21.1, 3797.0], [21.2, 3813.0], [21.3, 3814.0], [21.4, 3822.0], [21.5, 3824.0], [21.6, 3824.0], [21.7, 3834.0], [21.8, 3835.0], [21.9, 3836.0], [22.0, 3841.0], [22.1, 3850.0], [22.2, 3857.0], [22.3, 3861.0], [22.4, 3874.0], [22.5, 3876.0], [22.6, 3885.0], [22.7, 3886.0], [22.8, 3890.0], [22.9, 3897.0], [23.0, 3903.0], [23.1, 3905.0], [23.2, 3917.0], [23.3, 3917.0], [23.4, 3924.0], [23.5, 3931.0], [23.6, 3949.0], [23.7, 3951.0], [23.8, 3966.0], [23.9, 3982.0], [24.0, 3998.0], [24.1, 4004.0], [24.2, 4007.0], [24.3, 4010.0], [24.4, 4014.0], [24.5, 4017.0], [24.6, 4028.0], [24.7, 4029.0], [24.8, 4046.0], [24.9, 4070.0], [25.0, 4086.0], [25.1, 4092.0], [25.2, 4096.0], [25.3, 4104.0], [25.4, 4107.0], [25.5, 4108.0], [25.6, 4114.0], [25.7, 4117.0], [25.8, 4122.0], [25.9, 4127.0], [26.0, 4141.0], [26.1, 4144.0], [26.2, 4146.0], [26.3, 4149.0], [26.4, 4172.0], [26.5, 4176.0], [26.6, 4210.0], [26.7, 4231.0], [26.8, 4252.0], [26.9, 4260.0], [27.0, 4270.0], [27.1, 4271.0], [27.2, 4280.0], [27.3, 4298.0], [27.4, 4302.0], [27.5, 4305.0], [27.6, 4312.0], [27.7, 4314.0], [27.8, 4323.0], [27.9, 4326.0], [28.0, 4337.0], [28.1, 4340.0], [28.2, 4345.0], [28.3, 4348.0], [28.4, 4357.0], [28.5, 4366.0], [28.6, 4366.0], [28.7, 4384.0], [28.8, 4385.0], [28.9, 4406.0], [29.0, 4414.0], [29.1, 4425.0], [29.2, 4433.0], [29.3, 4452.0], [29.4, 4474.0], [29.5, 4493.0], [29.6, 4494.0], [29.7, 4499.0], [29.8, 4516.0], [29.9, 4518.0], [30.0, 4520.0], [30.1, 4541.0], [30.2, 4548.0], [30.3, 4550.0], [30.4, 4557.0], [30.5, 4568.0], [30.6, 4573.0], [30.7, 4576.0], [30.8, 4581.0], [30.9, 4592.0], [31.0, 4597.0], [31.1, 4598.0], [31.2, 4606.0], [31.3, 4610.0], [31.4, 4615.0], [31.5, 4627.0], [31.6, 4647.0], [31.7, 4652.0], [31.8, 4653.0], [31.9, 4658.0], [32.0, 4667.0], [32.1, 4688.0], [32.2, 4693.0], [32.3, 4713.0], [32.4, 4717.0], [32.5, 4735.0], [32.6, 4741.0], [32.7, 4743.0], [32.8, 4813.0], [32.9, 4813.0], [33.0, 4814.0], [33.1, 4825.0], [33.2, 4845.0], [33.3, 4848.0], [33.4, 4855.0], [33.5, 4886.0], [33.6, 4912.0], [33.7, 4913.0], [33.8, 4933.0], [33.9, 4964.0], [34.0, 4988.0], [34.1, 4992.0], [34.2, 4997.0], [34.3, 5007.0], [34.4, 5008.0], [34.5, 5009.0], [34.6, 5030.0], [34.7, 5059.0], [34.8, 5082.0], [34.9, 5094.0], [35.0, 5101.0], [35.1, 5104.0], [35.2, 5118.0], [35.3, 5124.0], [35.4, 5136.0], [35.5, 5155.0], [35.6, 5178.0], [35.7, 5178.0], [35.8, 5180.0], [35.9, 5180.0], [36.0, 5189.0], [36.1, 5194.0], [36.2, 5194.0], [36.3, 5202.0], [36.4, 5216.0], [36.5, 5236.0], [36.6, 5251.0], [36.7, 5270.0], [36.8, 5272.0], [36.9, 5276.0], [37.0, 5279.0], [37.1, 5336.0], [37.2, 5337.0], [37.3, 5338.0], [37.4, 5351.0], [37.5, 5356.0], [37.6, 5373.0], [37.7, 5373.0], [37.8, 5375.0], [37.9, 5385.0], [38.0, 5409.0], [38.1, 5414.0], [38.2, 5432.0], [38.3, 5434.0], [38.4, 5444.0], [38.5, 5499.0], [38.6, 5499.0], [38.7, 5500.0], [38.8, 5502.0], [38.9, 5510.0], [39.0, 5519.0], [39.1, 5526.0], [39.2, 5528.0], [39.3, 5531.0], [39.4, 5541.0], [39.5, 5543.0], [39.6, 5546.0], [39.7, 5566.0], [39.8, 5582.0], [39.9, 5597.0], [40.0, 5620.0], [40.1, 5631.0], [40.2, 5652.0], [40.3, 5669.0], [40.4, 5700.0], [40.5, 5702.0], [40.6, 5709.0], [40.7, 5733.0], [40.8, 5764.0], [40.9, 5765.0], [41.0, 5795.0], [41.1, 5797.0], [41.2, 5798.0], [41.3, 5832.0], [41.4, 5843.0], [41.5, 5855.0], [41.6, 5859.0], [41.7, 5859.0], [41.8, 5867.0], [41.9, 5875.0], [42.0, 5877.0], [42.1, 5902.0], [42.2, 5915.0], [42.3, 5947.0], [42.4, 5970.0], [42.5, 5971.0], [42.6, 6022.0], [42.7, 6051.0], [42.8, 6102.0], [42.9, 6125.0], [43.0, 6132.0], [43.1, 6140.0], [43.2, 6156.0], [43.3, 6160.0], [43.4, 6187.0], [43.5, 6204.0], [43.6, 6204.0], [43.7, 6212.0], [43.8, 6213.0], [43.9, 6219.0], [44.0, 6219.0], [44.1, 6223.0], [44.2, 6225.0], [44.3, 6238.0], [44.4, 6243.0], [44.5, 6270.0], [44.6, 6274.0], [44.7, 6278.0], [44.8, 6282.0], [44.9, 6283.0], [45.0, 6300.0], [45.1, 6306.0], [45.2, 6327.0], [45.3, 6329.0], [45.4, 6334.0], [45.5, 6348.0], [45.6, 6352.0], [45.7, 6361.0], [45.8, 6393.0], [45.9, 6407.0], [46.0, 6410.0], [46.1, 6424.0], [46.2, 6451.0], [46.3, 6457.0], [46.4, 6465.0], [46.5, 6466.0], [46.6, 6478.0], [46.7, 6488.0], [46.8, 6497.0], [46.9, 6507.0], [47.0, 6544.0], [47.1, 6553.0], [47.2, 6556.0], [47.3, 6566.0], [47.4, 6569.0], [47.5, 6585.0], [47.6, 6589.0], [47.7, 6589.0], [47.8, 6617.0], [47.9, 6647.0], [48.0, 6648.0], [48.1, 6666.0], [48.2, 6700.0], [48.3, 6704.0], [48.4, 6715.0], [48.5, 6756.0], [48.6, 6762.0], [48.7, 6763.0], [48.8, 6777.0], [48.9, 6777.0], [49.0, 6783.0], [49.1, 6797.0], [49.2, 6799.0], [49.3, 6803.0], [49.4, 6807.0], [49.5, 6810.0], [49.6, 6814.0], [49.7, 6816.0], [49.8, 6873.0], [49.9, 6879.0], [50.0, 6885.0], [50.1, 6901.0], [50.2, 6911.0], [50.3, 6922.0], [50.4, 6935.0], [50.5, 6950.0], [50.6, 6953.0], [50.7, 6953.0], [50.8, 6975.0], [50.9, 6977.0], [51.0, 6984.0], [51.1, 6989.0], [51.2, 6991.0], [51.3, 7029.0], [51.4, 7043.0], [51.5, 7044.0], [51.6, 7075.0], [51.7, 7101.0], [51.8, 7105.0], [51.9, 7111.0], [52.0, 7116.0], [52.1, 7121.0], [52.2, 7124.0], [52.3, 7141.0], [52.4, 7158.0], [52.5, 7165.0], [52.6, 7201.0], [52.7, 7230.0], [52.8, 7247.0], [52.9, 7247.0], [53.0, 7247.0], [53.1, 7257.0], [53.2, 7261.0], [53.3, 7277.0], [53.4, 7277.0], [53.5, 7289.0], [53.6, 7316.0], [53.7, 7332.0], [53.8, 7343.0], [53.9, 7349.0], [54.0, 7350.0], [54.1, 7355.0], [54.2, 7368.0], [54.3, 7374.0], [54.4, 7375.0], [54.5, 7379.0], [54.6, 7380.0], [54.7, 7395.0], [54.8, 7400.0], [54.9, 7412.0], [55.0, 7417.0], [55.1, 7427.0], [55.2, 7429.0], [55.3, 7430.0], [55.4, 7437.0], [55.5, 7442.0], [55.6, 7443.0], [55.7, 7444.0], [55.8, 7445.0], [55.9, 7447.0], [56.0, 7456.0], [56.1, 7458.0], [56.2, 7464.0], [56.3, 7464.0], [56.4, 7472.0], [56.5, 7483.0], [56.6, 7494.0], [56.7, 7497.0], [56.8, 7514.0], [56.9, 7515.0], [57.0, 7520.0], [57.1, 7529.0], [57.2, 7539.0], [57.3, 7539.0], [57.4, 7541.0], [57.5, 7555.0], [57.6, 7570.0], [57.7, 7581.0], [57.8, 7614.0], [57.9, 7615.0], [58.0, 7641.0], [58.1, 7692.0], [58.2, 7715.0], [58.3, 7720.0], [58.4, 7731.0], [58.5, 7735.0], [58.6, 7736.0], [58.7, 7737.0], [58.8, 7743.0], [58.9, 7750.0], [59.0, 7763.0], [59.1, 7765.0], [59.2, 7766.0], [59.3, 7770.0], [59.4, 7798.0], [59.5, 7814.0], [59.6, 7825.0], [59.7, 7831.0], [59.8, 7860.0], [59.9, 7882.0], [60.0, 7897.0], [60.1, 7914.0], [60.2, 7918.0], [60.3, 7920.0], [60.4, 7926.0], [60.5, 7945.0], [60.6, 7962.0], [60.7, 7985.0], [60.8, 8002.0], [60.9, 8044.0], [61.0, 8060.0], [61.1, 8062.0], [61.2, 8071.0], [61.3, 8092.0], [61.4, 8098.0], [61.5, 8140.0], [61.6, 8157.0], [61.7, 8177.0], [61.8, 8185.0], [61.9, 8193.0], [62.0, 8208.0], [62.1, 8243.0], [62.2, 8246.0], [62.3, 8256.0], [62.4, 8265.0], [62.5, 8296.0], [62.6, 8302.0], [62.7, 8360.0], [62.8, 8364.0], [62.9, 8369.0], [63.0, 8371.0], [63.1, 8402.0], [63.2, 8441.0], [63.3, 8455.0], [63.4, 8488.0], [63.5, 8492.0], [63.6, 8494.0], [63.7, 8513.0], [63.8, 8525.0], [63.9, 8529.0], [64.0, 8563.0], [64.1, 8577.0], [64.2, 8588.0], [64.3, 8593.0], [64.4, 8637.0], [64.5, 8645.0], [64.6, 8656.0], [64.7, 8656.0], [64.8, 8663.0], [64.9, 8695.0], [65.0, 8723.0], [65.1, 8752.0], [65.2, 8772.0], [65.3, 8796.0], [65.4, 8803.0], [65.5, 8819.0], [65.6, 8833.0], [65.7, 8837.0], [65.8, 8868.0], [65.9, 8897.0], [66.0, 8900.0], [66.1, 8910.0], [66.2, 8934.0], [66.3, 8952.0], [66.4, 8971.0], [66.5, 8990.0], [66.6, 8994.0], [66.7, 9002.0], [66.8, 9050.0], [66.9, 9059.0], [67.0, 9077.0], [67.1, 9103.0], [67.2, 9118.0], [67.3, 9118.0], [67.4, 9138.0], [67.5, 9145.0], [67.6, 9153.0], [67.7, 9165.0], [67.8, 9167.0], [67.9, 9167.0], [68.0, 9194.0], [68.1, 9211.0], [68.2, 9220.0], [68.3, 9240.0], [68.4, 9293.0], [68.5, 9327.0], [68.6, 9353.0], [68.7, 9395.0], [68.8, 9413.0], [68.9, 9551.0], [69.0, 9578.0], [69.1, 9635.0], [69.2, 9674.0], [69.3, 9681.0], [69.4, 9750.0], [69.5, 9791.0], [69.6, 9813.0], [69.7, 9818.0], [69.8, 9848.0], [69.9, 9862.0], [70.0, 9877.0], [70.1, 9887.0], [70.2, 9907.0], [70.3, 9920.0], [70.4, 9935.0], [70.5, 9952.0], [70.6, 9983.0], [70.7, 10022.0], [70.8, 10058.0], [70.9, 10092.0], [71.0, 10098.0], [71.1, 10168.0], [71.2, 10274.0], [71.3, 10307.0], [71.4, 10328.0], [71.5, 10329.0], [71.6, 10367.0], [71.7, 10409.0], [71.8, 10486.0], [71.9, 10510.0], [72.0, 10510.0], [72.1, 10522.0], [72.2, 10576.0], [72.3, 10705.0], [72.4, 10729.0], [72.5, 10751.0], [72.6, 10760.0], [72.7, 10775.0], [72.8, 10823.0], [72.9, 10855.0], [73.0, 10856.0], [73.1, 10962.0], [73.2, 10966.0], [73.3, 10981.0], [73.4, 11043.0], [73.5, 11075.0], [73.6, 11076.0], [73.7, 11104.0], [73.8, 11138.0], [73.9, 11175.0], [74.0, 11199.0], [74.1, 11205.0], [74.2, 11232.0], [74.3, 11234.0], [74.4, 11257.0], [74.5, 11264.0], [74.6, 11388.0], [74.7, 11395.0], [74.8, 11418.0], [74.9, 11584.0], [75.0, 11626.0], [75.1, 11675.0], [75.2, 11703.0], [75.3, 11734.0], [75.4, 11780.0], [75.5, 11820.0], [75.6, 11859.0], [75.7, 11988.0], [75.8, 12033.0], [75.9, 12052.0], [76.0, 12081.0], [76.1, 12091.0], [76.2, 12093.0], [76.3, 12108.0], [76.4, 12134.0], [76.5, 12170.0], [76.6, 12181.0], [76.7, 12192.0], [76.8, 12219.0], [76.9, 12221.0], [77.0, 12256.0], [77.1, 12369.0], [77.2, 12388.0], [77.3, 12393.0], [77.4, 12402.0], [77.5, 12404.0], [77.6, 12474.0], [77.7, 12635.0], [77.8, 12658.0], [77.9, 12680.0], [78.0, 12726.0], [78.1, 12767.0], [78.2, 12863.0], [78.3, 12941.0], [78.4, 13101.0], [78.5, 13109.0], [78.6, 13133.0], [78.7, 13137.0], [78.8, 13181.0], [78.9, 13256.0], [79.0, 13298.0], [79.1, 13424.0], [79.2, 13528.0], [79.3, 13532.0], [79.4, 13585.0], [79.5, 13585.0], [79.6, 13618.0], [79.7, 13665.0], [79.8, 13671.0], [79.9, 13784.0], [80.0, 13805.0], [80.1, 13826.0], [80.2, 14015.0], [80.3, 14097.0], [80.4, 14157.0], [80.5, 14224.0], [80.6, 14290.0], [80.7, 14340.0], [80.8, 14360.0], [80.9, 14399.0], [81.0, 14428.0], [81.1, 14463.0], [81.2, 14467.0], [81.3, 14477.0], [81.4, 14573.0], [81.5, 14606.0], [81.6, 14669.0], [81.7, 14679.0], [81.8, 14684.0], [81.9, 14687.0], [82.0, 14697.0], [82.1, 14729.0], [82.2, 14748.0], [82.3, 14787.0], [82.4, 14869.0], [82.5, 15138.0], [82.6, 15188.0], [82.7, 15211.0], [82.8, 15215.0], [82.9, 15268.0], [83.0, 15287.0], [83.1, 15342.0], [83.2, 15432.0], [83.3, 15484.0], [83.4, 15517.0], [83.5, 15622.0], [83.6, 15631.0], [83.7, 15679.0], [83.8, 15709.0], [83.9, 15808.0], [84.0, 15832.0], [84.1, 15840.0], [84.2, 15892.0], [84.3, 15942.0], [84.4, 15999.0], [84.5, 16006.0], [84.6, 16073.0], [84.7, 16080.0], [84.8, 16147.0], [84.9, 16153.0], [85.0, 16189.0], [85.1, 16198.0], [85.2, 16208.0], [85.3, 16219.0], [85.4, 16223.0], [85.5, 16249.0], [85.6, 16303.0], [85.7, 16363.0], [85.8, 16374.0], [85.9, 16383.0], [86.0, 16499.0], [86.1, 16957.0], [86.2, 17094.0], [86.3, 17151.0], [86.4, 17244.0], [86.5, 17291.0], [86.6, 17429.0], [86.7, 17460.0], [86.8, 17487.0], [86.9, 17491.0], [87.0, 17746.0], [87.1, 17755.0], [87.2, 17785.0], [87.3, 17812.0], [87.4, 17826.0], [87.5, 17856.0], [87.6, 18104.0], [87.7, 18113.0], [87.8, 18230.0], [87.9, 18259.0], [88.0, 18340.0], [88.1, 18377.0], [88.2, 18397.0], [88.3, 18823.0], [88.4, 18844.0], [88.5, 18845.0], [88.6, 18845.0], [88.7, 19061.0], [88.8, 19066.0], [88.9, 19110.0], [89.0, 19391.0], [89.1, 19556.0], [89.2, 20075.0], [89.3, 20147.0], [89.4, 20214.0], [89.5, 20318.0], [89.6, 20495.0], [89.7, 20695.0], [89.8, 20842.0], [89.9, 21163.0], [90.0, 21363.0], [90.1, 21484.0], [90.2, 21502.0], [90.3, 21907.0], [90.4, 22006.0], [90.5, 22066.0], [90.6, 22070.0], [90.7, 22249.0], [90.8, 23041.0], [90.9, 23370.0], [91.0, 23476.0], [91.1, 23610.0], [91.2, 23622.0], [91.3, 23752.0], [91.4, 23770.0], [91.5, 23817.0], [91.6, 24192.0], [91.7, 24420.0], [91.8, 24438.0], [91.9, 24556.0], [92.0, 24610.0], [92.1, 24694.0], [92.2, 24778.0], [92.3, 24909.0], [92.4, 24926.0], [92.5, 25530.0], [92.6, 25682.0], [92.7, 25742.0], [92.8, 25759.0], [92.9, 25890.0], [93.0, 25903.0], [93.1, 26734.0], [93.2, 26955.0], [93.3, 26962.0], [93.4, 26969.0], [93.5, 27443.0], [93.6, 27638.0], [93.7, 27710.0], [93.8, 27724.0], [93.9, 27825.0], [94.0, 27956.0], [94.1, 27963.0], [94.2, 27971.0], [94.3, 27972.0], [94.4, 27980.0], [94.5, 27984.0], [94.6, 27985.0], [94.7, 27986.0], [94.8, 27989.0], [94.9, 28018.0], [95.0, 28554.0], [95.1, 28799.0], [95.2, 28837.0], [95.3, 29021.0], [95.4, 29032.0], [95.5, 29542.0], [95.6, 29544.0], [95.7, 29544.0], [95.8, 29545.0], [95.9, 29552.0], [96.0, 29605.0], [96.1, 29903.0], [96.2, 29917.0], [96.3, 30024.0], [96.4, 30135.0], [96.5, 30483.0], [96.6, 30763.0], [96.7, 30785.0], [96.8, 30821.0], [96.9, 30914.0], [97.0, 31067.0], [97.1, 31067.0], [97.2, 31068.0], [97.3, 31082.0], [97.4, 31894.0], [97.5, 31922.0], [97.6, 31930.0], [97.7, 31933.0], [97.8, 31934.0], [97.9, 31936.0], [98.0, 31951.0], [98.1, 32083.0], [98.2, 32452.0], [98.3, 32459.0], [98.4, 32947.0], [98.5, 32952.0], [98.6, 32954.0], [98.7, 32954.0], [98.8, 32955.0], [98.9, 32957.0], [99.0, 32971.0], [99.1, 33478.0], [99.2, 33481.0], [99.3, 33985.0], [99.4, 37708.0], [99.5, 37809.0], [99.6, 37812.0], [99.7, 38737.0], [99.8, 47973.0], [99.9, 50418.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 20.0, "series": [{"data": [[32900.0, 7.0], [37700.0, 1.0], [600.0, 1.0], [700.0, 1.0], [800.0, 1.0], [900.0, 2.0], [1000.0, 2.0], [1100.0, 2.0], [1200.0, 5.0], [1300.0, 6.0], [1400.0, 7.0], [1500.0, 4.0], [1600.0, 6.0], [1700.0, 4.0], [1800.0, 9.0], [1900.0, 1.0], [2000.0, 7.0], [2100.0, 5.0], [2300.0, 5.0], [2200.0, 7.0], [2400.0, 7.0], [2500.0, 8.0], [2600.0, 5.0], [2700.0, 10.0], [2800.0, 7.0], [2900.0, 5.0], [3000.0, 8.0], [3100.0, 9.0], [3300.0, 13.0], [3200.0, 13.0], [3400.0, 18.0], [3500.0, 9.0], [3700.0, 13.0], [3600.0, 11.0], [3800.0, 18.0], [3900.0, 11.0], [4000.0, 12.0], [4100.0, 13.0], [4200.0, 8.0], [4300.0, 15.0], [4600.0, 11.0], [4400.0, 9.0], [4500.0, 14.0], [4800.0, 8.0], [4700.0, 5.0], [4900.0, 7.0], [5100.0, 13.0], [5000.0, 7.0], [5200.0, 8.0], [5300.0, 9.0], [5400.0, 7.0], [5500.0, 13.0], [5600.0, 4.0], [5700.0, 9.0], [5800.0, 8.0], [6100.0, 7.0], [5900.0, 5.0], [6000.0, 2.0], [6200.0, 15.0], [6300.0, 9.0], [6400.0, 10.0], [6500.0, 9.0], [6600.0, 4.0], [6900.0, 12.0], [6700.0, 11.0], [6800.0, 8.0], [7100.0, 9.0], [7000.0, 4.0], [7400.0, 20.0], [7200.0, 10.0], [7300.0, 12.0], [7600.0, 4.0], [7500.0, 10.0], [7700.0, 13.0], [7800.0, 6.0], [7900.0, 7.0], [8000.0, 7.0], [8100.0, 5.0], [8400.0, 6.0], [8700.0, 4.0], [8200.0, 6.0], [8600.0, 6.0], [8500.0, 7.0], [8300.0, 5.0], [9200.0, 4.0], [9100.0, 10.0], [8800.0, 6.0], [8900.0, 7.0], [9000.0, 4.0], [9500.0, 2.0], [9600.0, 3.0], [9300.0, 3.0], [9700.0, 2.0], [9400.0, 1.0], [9900.0, 5.0], [9800.0, 6.0], [10000.0, 4.0], [10200.0, 1.0], [10100.0, 1.0], [10300.0, 4.0], [10700.0, 5.0], [10400.0, 2.0], [10500.0, 4.0], [10900.0, 3.0], [11100.0, 4.0], [11200.0, 5.0], [10800.0, 3.0], [11000.0, 3.0], [11700.0, 3.0], [11500.0, 1.0], [11300.0, 2.0], [11400.0, 1.0], [11600.0, 2.0], [12100.0, 5.0], [12200.0, 3.0], [12000.0, 5.0], [11800.0, 2.0], [11900.0, 2.0], [12400.0, 3.0], [12700.0, 2.0], [12600.0, 3.0], [12300.0, 3.0], [13200.0, 2.0], [12800.0, 1.0], [13100.0, 5.0], [12900.0, 1.0], [13500.0, 4.0], [13700.0, 1.0], [13400.0, 1.0], [13800.0, 2.0], [13600.0, 3.0], [14000.0, 2.0], [14200.0, 2.0], [14100.0, 1.0], [14300.0, 3.0], [14400.0, 4.0], [14600.0, 6.0], [14500.0, 1.0], [14700.0, 3.0], [14800.0, 1.0], [15100.0, 2.0], [15200.0, 4.0], [15300.0, 1.0], [15700.0, 1.0], [15400.0, 2.0], [15800.0, 4.0], [15600.0, 3.0], [15500.0, 1.0], [16000.0, 3.0], [16100.0, 4.0], [16200.0, 4.0], [16300.0, 4.0], [15900.0, 2.0], [17200.0, 2.0], [17400.0, 4.0], [16400.0, 1.0], [17000.0, 1.0], [18200.0, 2.0], [17800.0, 3.0], [19000.0, 2.0], [18800.0, 4.0], [20000.0, 1.0], [20200.0, 1.0], [20400.0, 1.0], [20600.0, 1.0], [20800.0, 1.0], [21400.0, 1.0], [22000.0, 3.0], [22200.0, 1.0], [23000.0, 1.0], [23400.0, 1.0], [23600.0, 2.0], [23800.0, 1.0], [24400.0, 2.0], [24600.0, 2.0], [25800.0, 1.0], [25600.0, 1.0], [27600.0, 1.0], [27400.0, 1.0], [28000.0, 1.0], [27800.0, 1.0], [29000.0, 2.0], [29600.0, 1.0], [28800.0, 1.0], [30000.0, 1.0], [30400.0, 1.0], [31000.0, 4.0], [30800.0, 1.0], [31800.0, 1.0], [32000.0, 1.0], [32400.0, 2.0], [50400.0, 1.0], [33900.0, 1.0], [38700.0, 1.0], [47900.0, 1.0], [17100.0, 1.0], [16900.0, 1.0], [17700.0, 3.0], [18300.0, 3.0], [18100.0, 2.0], [19100.0, 1.0], [19300.0, 1.0], [19500.0, 1.0], [20100.0, 1.0], [20300.0, 1.0], [21300.0, 1.0], [21500.0, 1.0], [21100.0, 1.0], [21900.0, 1.0], [23300.0, 1.0], [23700.0, 2.0], [24100.0, 1.0], [24500.0, 1.0], [24900.0, 2.0], [24700.0, 1.0], [25500.0, 1.0], [25700.0, 2.0], [25900.0, 1.0], [26700.0, 1.0], [26900.0, 3.0], [27900.0, 9.0], [27700.0, 2.0], [28500.0, 1.0], [28700.0, 1.0], [29500.0, 5.0], [29900.0, 2.0], [30100.0, 1.0], [30700.0, 2.0], [30900.0, 1.0], [31900.0, 6.0], [33400.0, 2.0], [37800.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 50400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 627.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 627.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 366.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 420.12, "minX": 1.70115864E12, "maxY": 458.98666666666765, "series": [{"data": [[1.7011587E12, 458.98666666666765], [1.70115864E12, 420.12]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7011587E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 647.0, "minX": 1.0, "maxY": 50418.0, "series": [{"data": [[2.0, 47973.0], [3.0, 38737.0], [4.0, 37812.0], [5.0, 37809.0], [6.0, 37708.0], [7.0, 33985.0], [8.0, 33481.0], [9.0, 33478.0], [10.0, 32955.0], [12.0, 32964.0], [13.0, 32954.0], [15.0, 32949.5], [16.0, 32954.0], [17.0, 28554.0], [18.0, 32452.0], [19.0, 32459.0], [20.0, 31933.0], [22.0, 31935.0], [23.0, 31930.0], [24.0, 31922.0], [25.0, 27825.0], [26.0, 30914.0], [28.0, 29548.5], [29.0, 29542.0], [30.0, 29544.0], [31.0, 29544.0], [33.0, 31951.0], [32.0, 29021.0], [35.0, 31894.0], [34.0, 32083.0], [37.0, 28018.0], [36.0, 28837.0], [39.0, 27978.0], [43.0, 27963.0], [42.0, 27980.0], [45.0, 27985.0], [44.0, 27986.0], [47.0, 31068.0], [46.0, 31067.0], [48.0, 30821.0], [51.0, 31082.0], [50.0, 30775.0], [53.0, 30785.0], [52.0, 30763.0], [55.0, 29903.0], [54.0, 27443.0], [57.0, 30135.0], [56.0, 29605.0], [59.0, 26955.0], [58.0, 26962.0], [61.0, 30024.0], [60.0, 29917.0], [63.0, 25682.0], [62.0, 28799.0], [67.0, 27724.0], [66.0, 29032.0], [65.0, 25890.0], [64.0, 25903.0], [71.0, 24610.0], [70.0, 27956.0], [69.0, 27710.0], [68.0, 27638.0], [75.0, 25742.0], [74.0, 26734.0], [73.0, 25530.0], [72.0, 26969.0], [79.0, 24488.0], [77.0, 21163.0], [76.0, 25759.0], [83.0, 23622.0], [82.0, 24694.0], [81.0, 24438.0], [80.0, 24778.0], [87.0, 23476.0], [86.0, 23752.0], [85.0, 24909.0], [84.0, 24192.0], [91.0, 23370.0], [90.0, 23770.0], [89.0, 21907.0], [88.0, 24926.0], [95.0, 22066.0], [94.0, 23041.0], [93.0, 23817.0], [92.0, 21502.0], [99.0, 20318.0], [98.0, 23610.0], [97.0, 20495.0], [96.0, 19061.0], [103.0, 18844.0], [102.0, 16153.0], [101.0, 19391.0], [100.0, 22249.0], [107.0, 22006.0], [106.0, 18823.0], [105.0, 20457.5], [111.0, 16303.0], [110.0, 18113.0], [109.0, 21363.0], [108.0, 21484.0], [115.0, 20842.0], [114.0, 20147.0], [113.0, 17746.0], [112.0, 17755.0], [119.0, 18845.0], [118.0, 12767.0], [117.0, 20214.0], [116.0, 20695.0], [123.0, 15517.0], [122.0, 19110.0], [121.0, 18377.0], [120.0, 20075.0], [127.0, 18104.0], [126.0, 17151.0], [125.0, 15999.0], [124.0, 16957.0], [135.0, 18230.0], [134.0, 16219.0], [133.0, 19556.0], [132.0, 18340.0], [131.0, 18397.0], [130.0, 16383.0], [129.0, 12941.0], [128.0, 13618.0], [143.0, 11859.0], [142.0, 11974.0], [141.0, 11232.0], [140.0, 17812.0], [139.0, 16073.0], [138.0, 19066.0], [137.0, 10510.0], [136.0, 15942.0], [151.0, 17834.666666666668], [148.0, 17291.0], [147.0, 17826.0], [146.0, 17094.0], [145.0, 17856.0], [144.0, 17491.0], [159.0, 12859.0], [157.0, 14669.0], [156.0, 14679.0], [155.0, 10855.0], [154.0, 9935.0], [153.0, 17487.0], [152.0, 8990.0], [167.0, 6935.0], [166.0, 16249.0], [165.0, 10729.0], [164.0, 17429.0], [163.0, 8910.0], [162.0, 10022.0], [161.0, 15679.0], [160.0, 16499.0], [175.0, 16374.0], [174.0, 15840.0], [173.0, 8302.0], [172.0, 11075.0], [171.0, 15268.0], [170.0, 16803.5], [168.0, 9877.0], [183.0, 9907.0], [182.0, 10307.0], [181.0, 11138.0], [180.0, 11104.0], [179.0, 7374.0], [178.0, 13665.0], [177.0, 13671.0], [176.0, 7814.0], [191.0, 15832.0], [190.0, 15892.0], [189.0, 9818.0], [188.0, 7105.0], [187.0, 15631.0], [186.0, 7763.0], [185.0, 15851.0], [199.0, 9681.0], [198.0, 12106.5], [196.0, 7379.0], [195.0, 16208.0], [194.0, 15808.0], [193.0, 8193.0], [192.0, 14697.0], [207.0, 16198.0], [206.0, 15138.0], [205.0, 16223.0], [204.0, 6556.0], [203.0, 14787.0], [202.0, 7201.0], [201.0, 15342.0], [200.0, 15215.0], [215.0, 6977.0], [214.0, 8098.0], [213.0, 12091.0], [212.0, 8044.0], [211.0, 14869.0], [210.0, 16147.0], [209.0, 10823.0], [208.0, 16189.0], [223.0, 10966.0], [222.0, 7443.0], [221.0, 8360.0], [220.0, 15432.0], [219.0, 16006.0], [218.0, 14399.0], [217.0, 7444.0], [216.0, 10058.0], [231.0, 11149.0], [229.0, 10522.0], [228.0, 15484.0], [227.0, 7615.0], [226.0, 6648.0], [225.0, 6901.0], [224.0, 13805.0], [239.0, 14467.0], [238.0, 10760.0], [237.0, 7447.0], [236.0, 7277.0], [235.0, 8837.0], [234.0, 7641.0], [233.0, 10486.0], [232.0, 12404.0], [247.0, 12052.0], [246.0, 8296.0], [245.0, 10510.0], [244.0, 11376.0], [242.0, 12221.0], [241.0, 14729.0], [240.0, 6585.0], [255.0, 13337.5], [253.0, 12402.0], [252.0, 10098.0], [251.0, 8772.0], [250.0, 6238.0], [249.0, 11230.0], [270.0, 6803.0], [271.0, 11988.0], [269.0, 10092.0], [268.0, 7355.0], [267.0, 8645.0], [266.0, 10274.0], [265.0, 8833.0], [264.0, 15188.0], [263.0, 9635.0], [257.0, 8529.0], [256.0, 6212.0], [259.0, 15211.0], [258.0, 10168.0], [262.0, 6292.0], [260.0, 7124.0], [286.0, 12719.5], [284.0, 14340.0], [275.0, 5859.0], [274.0, 14748.0], [273.0, 14360.0], [272.0, 5867.0], [283.0, 7430.0], [282.0, 6022.0], [281.0, 11257.0], [280.0, 8900.0], [279.0, 5008.0], [278.0, 9887.0], [277.0, 7472.0], [276.0, 11675.0], [302.0, 14290.0], [303.0, 14463.0], [301.0, 14687.0], [300.0, 5597.0], [299.0, 13101.0], [298.0, 6953.0], [297.0, 14573.0], [296.0, 8723.0], [295.0, 7350.0], [289.0, 9118.0], [288.0, 6455.5], [291.0, 9194.0], [290.0, 13585.0], [294.0, 9165.0], [293.0, 9211.0], [292.0, 14684.0], [318.0, 7429.0], [319.0, 8563.0], [317.0, 8062.0], [316.0, 13826.0], [315.0, 7945.0], [314.0, 8369.0], [313.0, 8071.0], [312.0, 14606.0], [311.0, 7918.0], [305.0, 5543.0], [304.0, 7541.0], [307.0, 5385.0], [306.0, 7141.0], [310.0, 7464.0], [309.0, 14157.0], [308.0, 7029.0], [334.0, 8663.0], [335.0, 7692.0], [333.0, 9220.0], [332.0, 7736.0], [331.0, 14428.0], [330.0, 5764.0], [329.0, 8695.0], [328.0, 9153.0], [327.0, 7350.0], [321.0, 5432.0], [320.0, 8971.0], [323.0, 5373.0], [322.0, 13181.0], [325.0, 6393.0], [324.0, 4964.0], [339.0, 9327.0], [350.0, 4908.5], [351.0, 7765.0], [348.0, 11006.0], [338.0, 7812.5], [336.0, 6102.0], [346.0, 5236.0], [345.0, 7455.0], [343.0, 7860.0], [342.0, 7417.0], [341.0, 8157.0], [340.0, 8577.0], [364.0, 7430.333333333333], [366.0, 4592.0], [367.0, 13784.0], [365.0, 9059.0], [361.0, 3890.0], [360.0, 9103.0], [359.0, 5155.0], [353.0, 9138.0], [352.0, 11043.0], [355.0, 7165.0], [354.0, 3885.0], [358.0, 5124.0], [357.0, 9077.0], [356.0, 7230.0], [381.0, 4652.0], [382.0, 7116.0], [380.0, 5356.0], [370.0, 7720.0], [369.0, 7316.0], [368.0, 8656.0], [379.0, 8934.0], [378.0, 12635.0], [377.0, 6756.0], [376.0, 7361.0], [374.0, 12658.0], [373.0, 14224.0], [372.0, 8487.0], [398.0, 4804.5], [391.0, 3475.0], [390.0, 4739.5], [389.0, 7247.0], [388.0, 8441.0], [397.0, 4917.25], [387.0, 3779.0], [386.0, 7497.0], [385.0, 5194.0], [384.0, 4891.0], [399.0, 11234.0], [395.0, 4014.0], [394.0, 8819.0], [393.0, 3982.0], [392.0, 7483.0], [414.0, 5990.5], [412.0, 7952.5], [411.0, 3755.3333333333335], [413.0, 7529.0], [410.0, 7897.0], [409.0, 5979.333333333333], [408.0, 4104.0], [406.0, 10972.333333333334], [400.0, 6270.0], [402.0, 7539.0], [401.0, 7043.0], [430.0, 4357.5], [417.0, 7794.0], [423.0, 7119.25], [416.0, 4833.0], [431.0, 3313.0], [429.0, 8085.5], [418.0, 7515.0], [427.0, 6547.0], [425.0, 5702.0], [424.0, 3600.0], [421.0, 5213.5], [444.0, 5132.0], [434.0, 4888.666666666667], [433.0, 7766.0], [432.0, 4855.0], [435.0, 3897.0], [439.0, 3497.0], [438.0, 3931.0], [436.0, 8721.0], [437.0, 6199.0], [442.0, 3643.4], [443.0, 4848.0], [441.0, 3071.5], [440.0, 3243.25], [447.0, 3841.0], [446.0, 7743.0], [445.0, 3903.0], [462.0, 3417.0], [450.0, 6041.5], [449.0, 7349.0], [448.0, 4741.0], [451.0, 8656.0], [463.0, 12393.0], [461.0, 3359.0], [460.0, 3797.0], [459.0, 4845.0], [458.0, 3702.0], [456.0, 7798.0], [455.0, 8269.5], [453.0, 4340.0], [452.0, 3279.0], [478.0, 4610.0], [479.0, 3307.0], [477.0, 3308.0], [476.0, 3302.0], [474.0, 3300.0], [473.0, 3293.0], [472.0, 5276.0], [471.0, 4597.0], [464.0, 5947.0], [467.0, 11820.0], [466.0, 5010.0], [470.0, 3628.0], [469.0, 7750.0], [468.0, 6991.0], [495.0, 4743.0], [482.0, 3670.0], [487.0, 4541.0], [481.0, 3324.0], [480.0, 3822.0], [486.0, 3322.0], [485.0, 5843.0], [484.0, 3357.0], [489.0, 5396.666666666667], [494.0, 5526.0], [493.0, 5798.0], [492.0, 4548.0], [483.0, 12181.0], [491.0, 8371.0], [490.0, 3454.0], [488.0, 7514.0], [509.0, 8488.0], [508.0, 3130.0], [499.0, 4713.0], [498.0, 5010.0], [496.0, 5795.0], [507.0, 9635.0], [506.0, 5903.0], [511.0, 6465.5], [503.0, 6219.0], [502.0, 3501.0], [501.0, 5499.0], [500.0, 7343.0], [541.0, 9413.0], [526.0, 4309.5], [525.0, 4580.333333333333], [523.0, 6361.0], [522.0, 4598.0], [521.0, 7737.0], [520.0, 12081.0], [528.0, 4018.5], [529.0, 8752.0], [531.0, 7437.0], [530.0, 6348.0], [533.0, 12388.0], [532.0, 8246.0], [535.0, 3406.0], [534.0, 7247.0], [543.0, 12219.0], [542.0, 5272.0], [540.0, 4271.0], [539.0, 4302.0], [538.0, 7247.0], [537.0, 4433.0], [536.0, 5915.0], [527.0, 7458.0], [512.0, 7277.0], [514.0, 13528.0], [513.0, 6451.0], [516.0, 3491.0], [515.0, 7555.0], [518.0, 6989.0], [517.0, 12369.0], [519.0, 4499.0], [570.0, 6507.0], [574.0, 4270.0], [558.0, 5004.0], [557.0, 6160.0], [556.0, 11626.0], [555.0, 6617.0], [554.0, 3637.0], [553.0, 5709.0], [552.0, 3745.5], [560.0, 5241.5], [559.0, 5210.0], [563.0, 5566.0], [562.0, 4172.0], [561.0, 13256.0], [565.0, 4149.0], [564.0, 5780.0], [567.0, 4345.0], [566.0, 4323.0], [575.0, 7380.0], [573.0, 2612.0], [572.0, 4107.0], [571.0, 7101.0], [569.0, 4092.0], [568.0, 4348.0], [550.0, 6704.0], [549.0, 7257.0], [548.0, 5902.0], [547.0, 5519.0], [546.0, 3286.5], [544.0, 5528.0], [603.0, 3767.0], [607.0, 2473.0], [594.0, 5409.0], [593.0, 4605.0], [592.0, 6051.0], [598.0, 4897.0], [596.0, 7914.0], [595.0, 3874.0], [604.0, 3951.0], [606.0, 5592.0], [605.0, 6204.0], [602.0, 3836.0], [601.0, 5499.0], [600.0, 7150.0], [583.0, 6334.0], [582.0, 4576.0], [581.0, 5279.0], [580.0, 6410.0], [579.0, 5631.0], [578.0, 4127.0], [577.0, 5270.0], [576.0, 7962.0], [591.0, 2603.0], [590.0, 3690.5], [589.0, 8092.0], [587.0, 12680.0], [586.0, 7570.0], [585.0, 4010.0], [584.0, 7825.0], [615.0, 7250.666666666666], [612.0, 6782.0], [614.0, 6339.0], [613.0, 2780.0], [616.0, 2394.0], [618.0, 2726.0], [617.0, 7578.5], [620.0, 3824.0], [619.0, 2269.0], [622.0, 7490.5], [623.0, 4804.5], [609.0, 3814.0], [608.0, 6777.0], [611.0, 6911.0], [610.0, 4366.0], [633.0, 6189.5], [632.0, 3196.0], [634.0, 3905.0], [639.0, 5708.5], [624.0, 6278.0], [626.0, 6763.0], [625.0, 7044.0], [629.0, 6579.0], [627.0, 3917.0], [631.0, 4667.0], [630.0, 11175.0], [638.0, 5158.5], [637.0, 2274.0], [636.0, 6841.0], [666.0, 4451.666666666667], [641.0, 4240.0], [640.0, 5369.0], [643.0, 8864.5], [644.0, 5697.0], [647.0, 4348.0], [645.0, 6666.0], [665.0, 5441.0], [664.0, 8726.0], [642.0, 4774.333333333333], [654.0, 6604.0], [655.0, 4913.0], [653.0, 5075.5], [652.0, 3750.0], [651.0, 3473.0], [650.0, 4825.0], [649.0, 2225.0], [648.0, 7715.0], [657.0, 7292.0], [656.0, 7332.0], [658.0, 6807.0], [660.0, 11395.0], [659.0, 6566.0], [663.0, 4568.0], [662.0, 3459.0], [670.0, 4585.0], [669.0, 2041.0], [671.0, 6715.0], [668.0, 3900.0], [667.0, 5095.5], [698.0, 3484.0], [672.0, 4127.0], [680.0, 3614.5], [682.0, 12134.0], [681.0, 3917.0], [684.0, 2030.0], [683.0, 12033.0], [687.0, 5602.0], [685.0, 2341.0], [702.0, 3528.0], [689.0, 12108.0], [688.0, 12256.0], [691.0, 8455.0], [690.0, 11584.0], [693.0, 12192.0], [692.0, 4518.0], [700.0, 3435.0], [699.0, 4520.0], [697.0, 1746.0], [696.0, 7985.0], [679.0, 11205.0], [678.0, 2054.0], [677.0, 12474.0], [676.0, 4992.0], [675.0, 6743.5], [673.0, 4326.0], [695.0, 5375.0], [694.0, 10329.0], [730.0, 5832.0], [718.0, 4967.0], [713.0, 5444.0], [712.0, 3089.0], [711.0, 2319.0], [719.0, 3543.0], [704.0, 3348.0], [707.0, 5234.0], [706.0, 12170.0], [709.0, 4814.0], [708.0, 3236.0], [710.0, 1839.0], [729.0, 1662.0], [728.0, 1627.0], [731.0, 1626.0], [733.0, 1591.0], [732.0, 2764.0], [717.0, 7145.0], [716.0, 11199.0], [715.0, 5502.0], [714.0, 4038.5], [720.0, 6421.0], [723.0, 6397.5], [722.0, 3835.0], [721.0, 3537.0], [724.0, 3197.0], [727.0, 3758.5], [725.0, 3207.0], [735.0, 11734.0], [734.0, 2882.0], [760.0, 2470.5], [766.0, 6885.0], [767.0, 1419.0], [753.0, 1484.0], [752.0, 3525.0], [765.0, 6132.0], [764.0, 4013.3333333333335], [761.0, 2805.0], [750.0, 2045.0], [737.0, 4494.0], [736.0, 3099.0], [740.0, 4619.5], [738.0, 4176.0], [742.0, 7075.0], [741.0, 6816.0], [749.0, 3614.0], [748.0, 2769.0], [747.0, 3857.0], [746.0, 2402.0], [745.0, 2599.5], [744.0, 1856.0], [758.0, 3586.0], [757.0, 3143.0], [756.0, 1499.0], [755.0, 3808.5], [792.0, 7065.0], [786.0, 6636.666666666667], [788.0, 4785.666666666666], [789.0, 7222.666666666666], [790.0, 6047.444444444444], [791.0, 2574.0], [787.0, 3491.5], [785.0, 2655.5], [784.0, 5168.0], [783.0, 5402.5], [769.0, 1424.0], [768.0, 2748.0], [771.0, 4735.0], [770.0, 3998.0], [773.0, 1809.0], [772.0, 2999.0], [775.0, 5859.0], [774.0, 6799.0], [795.0, 6846.5], [794.0, 1196.0], [793.0, 2822.0], [796.0, 8243.0], [799.0, 1213.0], [798.0, 2530.0], [797.0, 1926.0], [782.0, 3547.0], [781.0, 4572.5], [780.0, 1354.0], [779.0, 4414.0], [778.0, 5797.0], [777.0, 1502.0], [776.0, 2703.0], [826.0, 3850.0], [830.0, 2425.0], [818.0, 7645.0], [813.0, 4582.333333333333], [812.0, 6274.0], [810.0, 5500.0], [809.0, 6213.0], [808.0, 2763.0], [815.0, 1049.0], [801.0, 4516.0], [800.0, 2770.0], [803.0, 4122.0], [802.0, 2500.0], [805.0, 2699.0], [804.0, 1574.0], [807.0, 4028.0], [806.0, 5336.0], [814.0, 1375.0], [825.0, 920.0], [824.0, 10409.0], [827.0, 9395.0], [821.0, 4881.0], [822.0, 2724.0], [823.0, 1351.0], [820.0, 2666.5], [819.0, 2248.0], [831.0, 5809.5], [817.0, 3560.0], [816.0, 3397.0], [829.0, 4627.0], [828.0, 2453.0], [856.0, 2878.0], [861.0, 8150.5], [862.0, 3677.0], [849.0, 4337.0], [848.0, 4357.0], [851.0, 9920.0], [850.0, 3531.0], [860.0, 6140.0], [859.0, 3025.0], [858.0, 5019.5], [847.0, 5877.0], [833.0, 2164.0], [832.0, 931.0], [835.0, 4117.0], [834.0, 6984.0], [837.0, 5178.0], [836.0, 1396.0], [839.0, 647.0], [838.0, 781.0], [846.0, 9791.0], [845.0, 7494.0], [844.0, 4581.0], [843.0, 9167.0], [842.0, 5194.0], [841.0, 1095.0], [840.0, 2271.0], [855.0, 9750.0], [854.0, 10705.0], [853.0, 4305.0], [852.0, 10981.0], [869.0, 10328.0], [872.0, 4536.5], [866.0, 5063.666666666667], [1.0, 50418.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[458.0150000000004, 9392.275000000001]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 872.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 81.66666666666667, "minX": 1.70115864E12, "maxY": 2283844.566666667, "series": [{"data": [[1.7011587E12, 2283844.566666667], [1.70115864E12, 93433.43333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7011587E12, 2930.2], [1.70115864E12, 81.66666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7011587E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3060.6800000000003, "minX": 1.70115864E12, "maxY": 9554.623589743587, "series": [{"data": [[1.7011587E12, 9554.623589743587], [1.70115864E12, 3060.6800000000003]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7011587E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2201.7999999999993, "minX": 1.70115864E12, "maxY": 4422.743589743592, "series": [{"data": [[1.7011587E12, 4422.743589743592], [1.70115864E12, 2201.7999999999993]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7011587E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1677.84, "minX": 1.70115864E12, "maxY": 5799.486153846158, "series": [{"data": [[1.7011587E12, 5799.486153846158], [1.70115864E12, 1677.84]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7011587E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1177.0, "minX": 1.70115864E12, "maxY": 28554.0, "series": [{"data": [[1.7011587E12, 28554.0], [1.70115864E12, 5118.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7011587E12, 16303.0], [1.70115864E12, 5034.400000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7011587E12, 24154.499999999993], [1.70115864E12, 5118.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7011587E12, 19815.5], [1.70115864E12, 5113.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7011587E12, 1337.0], [1.70115864E12, 1177.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7011587E12, 7736.0], [1.70115864E12, 3396.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7011587E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2248.0, "minX": 1.0, "maxY": 38737.0, "series": [{"data": [[129.0, 5236.0], [32.0, 13137.0], [8.0, 21745.0], [2.0, 20820.0], [147.0, 6280.5], [9.0, 24192.0], [10.0, 28554.0], [11.0, 16716.5], [48.0, 12404.0], [12.0, 19460.0], [206.0, 7375.0], [53.0, 6008.5], [13.0, 16957.0], [15.0, 5251.0], [17.0, 2767.0], [21.0, 15679.0], [88.0, 9179.5], [23.0, 5804.0], [25.0, 3396.0], [28.0, 7923.0], [7.0, 23205.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[129.0, 2980.0], [32.0, 7763.0], [8.0, 27840.0], [2.0, 25789.5], [147.0, 4127.0], [9.0, 24667.0], [10.0, 32955.0], [11.0, 16073.0], [48.0, 7615.0], [12.0, 17750.5], [3.0, 37809.0], [206.0, 4652.0], [53.0, 2248.0], [4.0, 25750.5], [1.0, 38737.0], [5.0, 29544.0], [21.0, 29605.0], [88.0, 7468.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 206.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 21644.5, "series": [{"data": [[129.0, 1944.0], [32.0, 4054.0], [8.0, 14347.5], [2.0, 11465.0], [147.0, 2837.5], [9.0, 5019.0], [10.0, 4878.0], [11.0, 5905.0], [48.0, 5211.0], [12.0, 12270.0], [206.0, 3524.0], [53.0, 3309.0], [13.0, 5364.0], [15.0, 4029.0], [17.0, 1457.0], [21.0, 5130.0], [88.0, 4038.5], [23.0, 3307.5], [25.0, 2241.0], [28.0, 3831.0], [7.0, 21644.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[129.0, 2980.0], [32.0, 7763.0], [8.0, 0.0], [2.0, 0.0], [147.0, 4126.0], [9.0, 0.0], [10.0, 0.0], [11.0, 16073.0], [48.0, 7614.0], [12.0, 17750.5], [3.0, 0.0], [206.0, 4652.0], [53.0, 2248.0], [4.0, 0.0], [1.0, 0.0], [5.0, 0.0], [21.0, 0.0], [88.0, 7467.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 206.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 7.5, "minX": 1.70115864E12, "maxY": 9.166666666666666, "series": [{"data": [[1.7011587E12, 9.166666666666666], [1.70115864E12, 7.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7011587E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.70115864E12, "maxY": 10.15, "series": [{"data": [[1.7011587E12, 10.15], [1.70115864E12, 0.4166666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7011587E12, 4.8]], "isOverall": false, "label": "403", "isController": false}, {"data": [[1.7011587E12, 1.3]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7011587E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.70115864E12, "maxY": 10.15, "series": [{"data": [[1.7011587E12, 10.15], [1.70115864E12, 0.4166666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.7011587E12, 6.1]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7011587E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.70115864E12, "maxY": 10.15, "series": [{"data": [[1.7011587E12, 10.15], [1.70115864E12, 0.4166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7011587E12, 6.1]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7011587E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

